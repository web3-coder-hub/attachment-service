// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: attachment.proto

package attachment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TextColor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextColor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextColor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextColorMultiError, or nil
// if none found.
func (m *TextColor) ValidateAll() error {
	return m.validate(true)
}

func (m *TextColor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for R

	// no validation rules for G

	// no validation rules for B

	if len(errors) > 0 {
		return TextColorMultiError(errors)
	}

	return nil
}

// TextColorMultiError is an error wrapping multiple validation errors returned
// by TextColor.ValidateAll() if the designated constraints aren't met.
type TextColorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextColorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextColorMultiError) AllErrors() []error { return m }

// TextColorValidationError is the validation error returned by
// TextColor.Validate if the designated constraints aren't met.
type TextColorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextColorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextColorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextColorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextColorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextColorValidationError) ErrorName() string { return "TextColorValidationError" }

// Error satisfies the builtin error interface
func (e TextColorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextColor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextColorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextColorValidationError{}

// Validate checks the field values on PDFMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PDFMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PDFMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PDFMetaMultiError, or nil if none found.
func (m *PDFMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *PDFMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PDFMeta_PrintSize_InLookup[m.GetPrintSize()]; !ok {
		err := PDFMetaValidationError{
			field:  "PrintSize",
			reason: "value must be in list [0 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Author != nil {
		// no validation rules for Author
	}

	if m.Subject != nil {
		// no validation rules for Subject
	}

	if m.Keywords != nil {
		// no validation rules for Keywords
	}

	if len(errors) > 0 {
		return PDFMetaMultiError(errors)
	}

	return nil
}

// PDFMetaMultiError is an error wrapping multiple validation errors returned
// by PDFMeta.ValidateAll() if the designated constraints aren't met.
type PDFMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PDFMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PDFMetaMultiError) AllErrors() []error { return m }

// PDFMetaValidationError is the validation error returned by PDFMeta.Validate
// if the designated constraints aren't met.
type PDFMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PDFMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PDFMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PDFMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PDFMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PDFMetaValidationError) ErrorName() string { return "PDFMetaValidationError" }

// Error satisfies the builtin error interface
func (e PDFMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPDFMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PDFMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PDFMetaValidationError{}

var _PDFMeta_PrintSize_InLookup = map[PrintSize]struct{}{
	0:  {},
	10: {},
}

// Validate checks the field values on PDFLineContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PDFLineContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PDFLineContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PDFLineContentMultiError,
// or nil if none found.
func (m *PDFLineContent) ValidateAll() error {
	return m.validate(true)
}

func (m *PDFLineContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FontFamily

	// no validation rules for FontStyle

	// no validation rules for FontSize

	if all {
		switch v := interface{}(m.GetTextColor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PDFLineContentValidationError{
					field:  "TextColor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PDFLineContentValidationError{
					field:  "TextColor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextColor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PDFLineContentValidationError{
				field:  "TextColor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	// no validation rules for ImgSrc

	if len(errors) > 0 {
		return PDFLineContentMultiError(errors)
	}

	return nil
}

// PDFLineContentMultiError is an error wrapping multiple validation errors
// returned by PDFLineContent.ValidateAll() if the designated constraints
// aren't met.
type PDFLineContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PDFLineContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PDFLineContentMultiError) AllErrors() []error { return m }

// PDFLineContentValidationError is the validation error returned by
// PDFLineContent.Validate if the designated constraints aren't met.
type PDFLineContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PDFLineContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PDFLineContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PDFLineContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PDFLineContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PDFLineContentValidationError) ErrorName() string { return "PDFLineContentValidationError" }

// Error satisfies the builtin error interface
func (e PDFLineContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPDFLineContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PDFLineContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PDFLineContentValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutFileUrl

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on PDFRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PDFRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PDFRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PDFRequestMultiError, or
// nil if none found.
func (m *PDFRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PDFRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMeta() == nil {
		err := PDFRequestValidationError{
			field:  "Meta",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PDFRequestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PDFRequestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PDFRequestValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetContentLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PDFRequestValidationError{
						field:  fmt.Sprintf("ContentLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PDFRequestValidationError{
						field:  fmt.Sprintf("ContentLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PDFRequestValidationError{
					field:  fmt.Sprintf("ContentLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PDFRequestMultiError(errors)
	}

	return nil
}

// PDFRequestMultiError is an error wrapping multiple validation errors
// returned by PDFRequest.ValidateAll() if the designated constraints aren't met.
type PDFRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PDFRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PDFRequestMultiError) AllErrors() []error { return m }

// PDFRequestValidationError is the validation error returned by
// PDFRequest.Validate if the designated constraints aren't met.
type PDFRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PDFRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PDFRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PDFRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PDFRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PDFRequestValidationError) ErrorName() string { return "PDFRequestValidationError" }

// Error satisfies the builtin error interface
func (e PDFRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPDFRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PDFRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PDFRequestValidationError{}

// Validate checks the field values on PDFResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PDFResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PDFResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PDFResponseMultiError, or
// nil if none found.
func (m *PDFResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PDFResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PDFResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PDFResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PDFResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PDFResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PDFResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PDFResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PDFResponseMultiError(errors)
	}

	return nil
}

// PDFResponseMultiError is an error wrapping multiple validation errors
// returned by PDFResponse.ValidateAll() if the designated constraints aren't met.
type PDFResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PDFResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PDFResponseMultiError) AllErrors() []error { return m }

// PDFResponseValidationError is the validation error returned by
// PDFResponse.Validate if the designated constraints aren't met.
type PDFResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PDFResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PDFResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PDFResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PDFResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PDFResponseValidationError) ErrorName() string { return "PDFResponseValidationError" }

// Error satisfies the builtin error interface
func (e PDFResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPDFResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PDFResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PDFResponseValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}
